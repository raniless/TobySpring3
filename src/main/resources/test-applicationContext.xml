<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                            http://www.springframework.org/schema/aop
                            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                            http://www.springframework.org/schema/tx
                            http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

    <bean id="userService" class="springbook.user.service.UserServiceImpl">
        <property name="userDao" ref="userDao" />
        <property name="mailSender" ref="mailSender" />
    </bean>

    <bean id="testUserService" class="springbook.user.service.UserServiceTest$TestUserService" parent="userService" />

    <bean id="userDao" class="springbook.user.dao.UserDaoJdbc">
        <property name="dataSource" ref="dataSource" />
        <property name="sqlService" ref="sqlService" />
    </bean>

    <bean id="sqlService" class="springbook.user.sqlservice.SimpleSqlService">
        <property name="sqlMap">
            <map>
                <entry key="userAdd" value="insert into users(id, name, password, level, login, recommend, email) values (?, ?, ?, ?, ?, ?, ?)" />
                <entry key="userGet" value="select * from users where id = ?" />
                <entry key="userGetAll" value="select * from users order by id" />
                <entry key="userDeleteAll" value="delete from users" />
                <entry key="userGetCount" value="select count(*) from users" />
                <entry key="userUpdate" value="update users set name = ?, password = ?, level = ?, login = ?, recommend = ?, email = ? where id = ?" />
            </map>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost/tobydb?serverTimezone=UTC" />
        <property name="username" value="root" />
        <property name="password" value="root" />
    </bean>

    <!--
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="mail.server.com" />
    </bean>
    -->

    <bean id="mailSender" class="springbook.user.service.DummyMailSender" />

    <!--
    <bean id="transactionAdvice" class="springbook.user.service.TransactionAdvice">
        <property name="transactionManager" ref="transactionManager" />
    </bean>

    <bean id="transactionAdvice" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager" />
        <property name="transactionAttributes">
            <props>
                <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
                <prop key="*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>

    //tx:adivice 태그에 의해 TransactionInterceptor 빈이 등록된다.
    //transaction-manager는 bean 아이디가 transactionManager면 생략 가능
    <tx:advice id="transactionAdvice">
        <tx:attributes>
            //propagation이 REQUIRED면 생략 가능
            <tx:method name="get*" read-only="true" />
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>
    -->

    <tx:annotation-driven />

    <!--
    <bean id="transactionPointcut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut">
        <property name="expression" value="execution(* *..*ServiceImpl.upgrade*(..))"/>
    </bean>

    <bean id="transactionAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
        <property name="advice" ref="transactionAdvice" />
        <property name="pointcut" ref="transactionPointcut" />
    </bean>

    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />
    -->

    <!--
    //aop:config 태그에 의해 AspectJAdvisorAutoProxyCreator 빈이 등록된다
    <aop:config>
        //expression의 표현식을 프로퍼티로 가진 AspectJExpressionPointcut 빈이 등록된다.
        <aop:pointcut id="transactionPointcut" expression="execution(* *..*ServiceImpl.upgrade*(..))"/>

        //advice와 pointcut의 ref를 프로퍼티로 갖는 DefaultBeanFactoryPointcutAdvisor 빈이 등록된다.
        <aop:advisor advice-ref="transactionAdvice" pointcut="bean(*Service)" />
    </aop:config>
    -->
</beans>